{"name":"Prig","tagline":"Open Source Alternative to Microsoft Fakes","body":"# Prig: Open Source Alternative to Microsoft Fakes\r\n![Prig](https://cdn.rawgit.com/urasandesu/Prig/master/Urasandesu.Prig.VSPackage/Resources/PrigPreviewImage.png)\r\n\r\nPrig(PRototyping jIG) is a framework that generates a [Test Double](http://martinfowler.com/bliki/TestDouble.html) like [Microsoft Fakes](http://msdn.microsoft.com/en-us/library/hh549175.aspx)/[Typemock Isolator](http://www.typemock.com/isolator-product-page)/[Telerik JustMock](http://www.telerik.com/products/mocking.aspx) based on Unmanaged Profiler APIs.\r\nThis framework enables that any methods are replaced with mocks. For example, a static property, a private method, a non-virtual member and so on.\r\n\r\n\r\n\r\n## STATUS\r\nAs of Jan 23, 2016, Released V2.1.1.\r\n\r\n\r\n\r\n## QUICK TOUR\r\nLet's say you want to test the following code: \r\n```cs\r\nusing System;\r\n\r\nnamespace QuickTour\r\n{\r\n    public class LifeInfo\r\n    {\r\n        public static bool IsNowLunchBreak()\r\n        {\r\n            var now = DateTime.Now;\r\n            return 12 <= now.Hour && now.Hour < 13;\r\n        }\r\n    }\r\n}\r\n```\r\nYou probably can't test this code, because `DateTime.Now` returns the value that depends on an external environment. To make be testable, you should replace `DateTime.Now` to the Test Double that returns the fake information. If you use Prig, it will enable you to generate a Test Double by the following steps without any editing the product code:\r\n\r\n\r\n### Step 1: Install From Visual Studio Gallery\r\nRun Visual Studio 2013(Community or more, 2015 is also supported) as Administrator and choose `TOOLS` - `Extensions and Updates...`.  \r\n![Extensions and Updates... menu](https://cdn.rawgit.com/urasandesu/Prig/master/Urasandesu.Prig.VSPackage/Resources/Step%201%20Install%20From%20Visual%20Studio%20Gallery%2001.png)\r\n\r\nNow in the Extensions and Updates window, take the following steps:\r\n\r\n1. On the left side, ensure `Visual Studio Gallery` is selected under `Online`.\r\n2. In the search box in the upper right corner, type `prig`.\r\n3. Select the `Prig` package, and click `Download`.\r\n\r\n![Extensions and Updates dialog](https://cdn.rawgit.com/urasandesu/Prig/master/Urasandesu.Prig.VSPackage/Resources/Step%201%20Install%20From%20Visual%20Studio%20Gallery%2002.png)\r\n\r\n**NOTE:** Prig requires PowerShell v3.0+. If you want to use Prig in Windows 7, please install [Windows Management Framework 3.0+](https://www.microsoft.com/en-us/download/details.aspx?id=34595) beforehand. [See also this issue](https://github.com/urasandesu/Prig/issues/41).\r\n\r\nOnce restart Visual Studio, you can find `PRIG` in the menu. Choose `PRIG` - `Register Prig (Needs Restarting)`.  \r\n![Register Prig menu](https://cdn.rawgit.com/urasandesu/Prig/master/Urasandesu.Prig.VSPackage/Resources/Step%201%20Install%20From%20Visual%20Studio%20Gallery%2003.png)\r\n\r\nFinally restart Visual Studio then you are now ready.\r\n\r\n\r\n### Step 2: Add Stub Settings\r\nAdd test project(e.g. `QuickTourTest`). Then, right click `References` and choose `Add Prig Assembly for mscorlib`:  \r\n![Add Stub Settings](https://cdn.rawgit.com/urasandesu/Prig/master/Urasandesu.Prig.VSPackage/Resources/Step%202%20Add%20Stub%20Settings.png)\r\n\r\n\r\n### Step 3: Modify Stub Settings\r\nYou can find the [Stub Settings File](https://github.com/urasandesu/Prig/wiki/Cheat-Sheet#stub_settings_file) `<assembly name>.<runtime version>.v<assembly version>.prig` in the project(in this case, it is `mscorlib.v4.0.30319.v4.0.0.0.prig`). So, right click the file and choose `Edit Prig Indirection Settings`:  \r\n![Edit Prig Indirection Settings](https://cdn.rawgit.com/urasandesu/Prig/master/Urasandesu.Prig.VSPackage/Resources/Step%203%20Modify%20Stub%20Settings%2001.png)\r\n\r\n\r\nThen, [Prig Setup Session](https://github.com/urasandesu/Prig/wiki/Cheat-Sheet#prig_setup_session) will start:  \r\n![Prig Setup Session](https://cdn.rawgit.com/urasandesu/Prig/master/Urasandesu.Prig.VSPackage/Resources/Step%203%20Modify%20Stub%20Settings%2002.png)\r\n\r\n\r\n```powershell\r\nWelcome to Prig Setup Session!!\r\n\r\n\r\nYou can add the Stub Settings File from here. In this session, you can use `$ReferencedAssemblies` that contains all\r\nreferenced assemblies information of current project. For example, if you want to get the indirection settings for all\r\nmembers of the type `Foo` that belongs to the referenced assembly `UntestableLibrary`, the following commands will achi\r\neve it:\r\n\r\nPS> $ReferencedAssemblies\r\n\r\nFullName\r\n--------\r\nmscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\nSystem, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\nMyLibrary, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\r\nUntestableLibrary, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\r\n\r\n\r\nPS> padd -ra $ReferencedAssemblies[-1]\r\nPS> $ReferencedAssemblies[-1].GetTypes() | ? { $_.Name -eq 'Foo' } | pfind | pget | clip\r\nPS> exit   # Then, paste the content on the clipboard to the Stub Settings File(e.g. `UntestableLibrary.v4.0.30319.v1.0.\r\n0.0.prig`).\r\n\r\n\r\n\r\nSee also the command's help `padd`, `pfind` and `pget`.\r\n\r\n\r\n\r\nCurrent Project: QuickTourTest\r\nWARNING: Change the Current Project from `Default Project: ` on the Package Manager Console if it isn't what you want.\r\n\r\n\r\n-EditorialInclude parameter is specified. You can also use the global variable $TargetReferencedAssembly in addition to\r\n $ReferencedAssemblies. Currently $TargetReferencedAssembly is:\r\n\r\nFullName\r\n--------\r\nmscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n\r\n\r\n\r\n\r\nPS 01.QuickTour>\r\n\r\n```\r\n\r\nNow, we want to get the indirection setting for `DateTime.Now`. In this case, execute the following commands and copy it to the clipboard: \r\n```powershell\r\nPS 01.QuickTour> $TargetReferencedAssembly.GetTypes() | ? { $_.Name -eq 'datetime' } | pfind -m 'get_Now' | pget | clip\r\nPS 01.QuickTour> exit\r\n```\r\n\r\nExit the [Prig Setup Session](https://github.com/urasandesu/Prig/wiki/Cheat-Sheet#prig_setup_session), and paste the copied information to the [Stub Settings File](https://github.com/urasandesu/Prig/wiki/Cheat-Sheet#stub_settings_file):  \r\n![Indirection Setting File](https://cdn.rawgit.com/urasandesu/Prig/master/Urasandesu.Prig.VSPackage/Resources/Step%203%20Modify%20Stub%20Settings%2003.png)\r\n\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  \r\n  <configSections>\r\n    <section name=\"prig\" type=\"Urasandesu.Prig.Framework.PilotStubberConfiguration.PrigSection, Urasandesu.Prig.Framework\" />\r\n  </configSections>\r\n\r\n  <prig>\r\n\r\n    <stubs>\r\n      <!-- PASTE HERE -->\r\n      <add name=\"NowGet\" alias=\"NowGet\">\r\n        <RuntimeMethodInfo xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:x=\"http://www.w3.org/2001/XMLSchema\" z:Id=\"1\" z:FactoryType=\"MemberInfoSerializationHolder\" z:Type=\"System.Reflection.MemberInfoSerializationHolder\" z:Assembly=\"0\" xmlns:z=\"http://schemas.microsoft.com/2003/10/Serialization/\" xmlns=\"http://schemas.datacontract.org/2004/07/System.Reflection\">\r\n          <Name z:Id=\"2\" z:Type=\"System.String\" z:Assembly=\"0\" xmlns=\"\">get_Now</Name>\r\n          <AssemblyName z:Id=\"3\" z:Type=\"System.String\" z:Assembly=\"0\" xmlns=\"\">mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</AssemblyName>\r\n          <ClassName z:Id=\"4\" z:Type=\"System.String\" z:Assembly=\"0\" xmlns=\"\">System.DateTime</ClassName>\r\n          <Signature z:Id=\"5\" z:Type=\"System.String\" z:Assembly=\"0\" xmlns=\"\">System.DateTime get_Now()</Signature>\r\n          <Signature2 z:Id=\"6\" z:Type=\"System.String\" z:Assembly=\"0\" xmlns=\"\">System.DateTime get_Now()</Signature2>\r\n          <MemberType z:Id=\"7\" z:Type=\"System.Int32\" z:Assembly=\"0\" xmlns=\"\">8</MemberType>\r\n          <GenericArguments i:nil=\"true\" xmlns=\"\" />\r\n        </RuntimeMethodInfo>\r\n      </add>\r\n      <!-- PASTE HERE -->\r\n    </stubs>\r\n    \r\n  </prig>\r\n\r\n</configuration>\r\n```\r\n\r\nWere you able to build successfully? OK, now you're ready to test them.\r\n\r\n\r\n### Step 4: Make Tests\r\nIn the test code, it becomes testable through the use of the stub and the replacement to Test Double that returns the fake information: \r\n```cs\r\nusing NUnit.Framework;\r\nusing QuickTour;\r\nusing System;\r\nusing System.Prig;\r\nusing Urasandesu.Prig.Framework;\r\n\r\nnamespace QuickTourTest\r\n{\r\n    [TestFixture]\r\n    public class LifeInfoTest\r\n    {\r\n        [Test]\r\n        public void IsNowLunchBreak_should_return_false_when_11_oclock()\r\n        {\r\n            // `IndirectionsContext` can minimize the influence of the API replacement.\r\n            using (new IndirectionsContext())\r\n            {\r\n                // Arrange\r\n                // `PDateTime` is the class that is generated automatically by Prig.\r\n                // We call such class \"Prig Type\". You can replace the method body of \r\n                // `DateTime.Now` by using that.\r\n                PDateTime.NowGet().Body = () => new DateTime(2013, 12, 13, 11, 00, 00);\r\n                // Hereafter, `DateTime.Now` will return only `2013/12/13 11:00:00`.\r\n\r\n                // Act\r\n                var result = LifeInfo.IsNowLunchBreak();\r\n\r\n                // Assert\r\n                Assert.IsFalse(result);\r\n            }\r\n        }\r\n\r\n        // In the same way, add the test case to cover other branches...\r\n        [Test]\r\n        public void IsNowLunchBreak_should_return_true_when_12_oclock()\r\n        {\r\n            using (new IndirectionsContext())\r\n            {\r\n                // Arrange\r\n                PDateTime.NowGet().Body = () => new DateTime(2013, 12, 13, 12, 00, 00);\r\n\r\n                // Act\r\n                var result = LifeInfo.IsNowLunchBreak();\r\n\r\n                // Assert\r\n                Assert.IsTrue(result);\r\n            }\r\n        }\r\n\r\n        [Test]\r\n        public void IsNowLunchBreak_should_return_false_when_13_oclock()\r\n        {\r\n            using (new IndirectionsContext())\r\n            {\r\n                // Arrange\r\n                PDateTime.NowGet().Body = () => new DateTime(2013, 12, 13, 13, 00, 00);\r\n\r\n                // Act\r\n                var result = LifeInfo.IsNowLunchBreak();\r\n\r\n                // Assert\r\n                Assert.IsFalse(result);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Step 5: Install Test Adapter\r\nBefore running tests in Visual Studio Test Explorer, you have to install a Test Adapter. Currently, Prig supports the following Test Adapters: NUnit, MSTest, [xUnit.net](https://www.nuget.org/packages/xunit.runner.visualstudio/). As the above described sample, let we use NUnit. Now, in the Package Manager Console, change the `Package source` to `Prig Source`, the `Default project` to `QuickTourTest` and execute the following command: \r\n```powershell\r\nPM> Install-Package NUnitTestAdapterForPrig\r\n```\r\n\r\n**NOTE:** Unfortunately, you can't use official [NUnit Test Adapter](https://www.nuget.org/packages/NUnitTestAdapter/) because it doesn't support any configurations like prime NUnit which is supported, e.g. [NUnit Gui Runner's Settings](http://www.nunit.org/index.php?p=settingsDialog&r=2.6.4) and [NUnit-Console's Settings](http://www.nunit.org/index.php?p=consoleCommandLine&r=2.6.4).\r\n\r\nAfter install, build the test project and choose the menu `TEST` - `Windows` - `Test Explorer`. Then, you can find runnable tests in the Test Explorer.  \r\n![Install Test Adapter 01](https://cdn.rawgit.com/urasandesu/Prig/master/Urasandesu.Prig.VSPackage/Resources/Step%205%20Install%20Test%20Adapter%2001.png)\r\n\r\nWhen Test Adapter was installed successfully, you can also modify the `Test Settings`. As the following image, change `Default Processor Architecture` to `x64` and uncheck `Keep Test Execution Engine Running`:  \r\n![Install Test Adapter 02](https://cdn.rawgit.com/urasandesu/Prig/master/Urasandesu.Prig.VSPackage/Resources/Step%205%20Install%20Test%20Adapter%2002.png)\r\n\r\n\r\n### Step 6: Run Tests\r\nIn fact, to enable any profiler based mocking tool, you have to set the environment variables. Therefore, such libraries - Microsoft Fakes/Typemock Isolator/Telerik JustMock provide small runner to satisfy the requisition, also it is true at Prig. Choose the menu `PRIG` - `Enable Test Adapter for ConsoleApplicationTest`:  \r\n![Run Tests 01](https://cdn.rawgit.com/urasandesu/Prig/master/Urasandesu.Prig.VSPackage/Resources/Step%206%20Run%20Tests%2001.png)\r\n\r\nThen, execute `TEST` - `Run` - `All Tests`, you can get test results in the Test Explorer.  \r\n![Run Tests 02](https://cdn.rawgit.com/urasandesu/Prig/master/Urasandesu.Prig.VSPackage/Resources/Step%206%20Run%20Tests%2002.png)\r\n\r\n\r\n### Final Step: Refactoring and Get Trig Back!\r\nIf tests have been created, you can refactor illimitably! For example, you probably can find the result of refactoring as follows: \r\n```cs\r\nusing System;\r\n\r\nnamespace QuickTour\r\n{\r\n    public class LifeInfo\r\n    {\r\n        public static bool IsNowLunchBreak()\r\n        {\r\n            // 1. Add overload to isolate from external environment then call it from original method.\r\n            return IsNowLunchBreak(DateTime.Now);\r\n        }\r\n\r\n        public static bool IsNowLunchBreak(DateTime now)\r\n        {\r\n            // 2. Also, I think the expression '12 <= now.Hour && now.Hour < 13' is too complex.\r\n            //    Better this way, isn't it?\r\n            return now.Hour == 12;\r\n        }\r\n        // 3. After refactoring, no longer need to use Prig, because you can test this overload.\r\n    }\r\n}\r\n```\r\nAs just described, Prig helps the code that depends on an untestable library gets trig back. I guarantee you will enjoy your development again!!\r\n\r\nFor more information, see also [Prig's wiki](https://github.com/urasandesu/Prig/wiki).\r\n\r\n\r\n\r\n\r\n# INSTALLATION FROM SOURCE CODE\r\n## DEPENDENCY\r\nTo build this project needs the following dependencies: \r\n* [Visual Studio 2013(more than Professional Edition because it uses ATL. Also, you can use Community Edition)](http://www.visualstudio.com/)\r\n* [Boost 1.60.0](http://www.boost.org/users/history/version_1_60_0.html)  \r\nExtract to C:\\boost_1_60_0, and will build with the following options(x86 and x64 libs are required):\r\n```dos\r\nCMD boost_1_60_0>cd\r\nC:\\boost_1_60_0\r\n\r\nCMD boost_1_60_0>bootstrap.bat\r\nBuilding Boost.Build engine\r\n\r\nBootstrapping is done. To build, run:\r\n\r\n    .\\b2\r\n\r\nTo adjust configuration, edit 'project-config.jam'.\r\nFurther information:\r\n...\r\n\r\nCMD boost_1_60_0>.\\b2 link=static threading=multi variant=debug,release runtime-link=shared,static -j 4\r\n\r\nBuilding the Boost C++ Libraries.\r\n\r\nPerforming configuration checks\r\n...\r\n\r\nCMD boost_1_60_0>.\\b2 link=static threading=multi variant=debug,release runtime-link=shared,static -j 4 --stagedir=.\\stage\\x64 address-model=64\r\n\r\nBuilding the Boost C++ Libraries.\r\n\r\nPerforming configuration checks\r\n...\r\n```\r\n* [Google Test 1.6](https://code.google.com/p/googletest/)  \r\nExtract to C:\\gtest-1.6.0, and upgrade C:\\gtest-1.6.0\\msvc\\gtest.sln to Visual Studio 2013. Choose the `Build` menu, and open `Configuration Manager...`. On `Configuration Manager` dialog box, in the `Active Solution Platform` drop-down list, choose the `<New...>` option. After the `New Solution Platform` dialog box is opened, in the `Type or select the new platform` drop-down list, select a 64-bit platform. Then build all(Debug/Release) configurations.\r\n* [NUnit 2.6.3.13283](http://www.nunit.org/)  \r\nInstall using with the installer(NUnit-2.6.3.msi).\r\n* [Modeling SDK for Microsoft Visual Studio 2013](http://www.microsoft.com/en-us/download/details.aspx?id=40754)  \r\nInstall using with the installer(VS_VmSdk.exe).\r\n* [Microsoft Visual Studio 2013 SDK](http://www.microsoft.com/en-us/download/details.aspx?id=40758)  \r\nInstall using with the installer(vssdk_full.exe).\r\n* [NAnt](http://nant.sourceforge.net/)  \r\nYou can also install in accordance with [the help](http://nant.sourceforge.net/release/latest/help/introduction/installation.html), but the easiest way is using Chocolatey: `choco install nant`.\r\n\r\n\r\n\r\n\r\n## BUILD\r\n### From PowerShell Script\r\nRun Developer Command Prompt for VS2013 as Administrator, and execute the following commands: \r\n```dos\r\nCMD Prig> cd\r\nC:\\Users\\User\\Prig\r\n\r\nCMD Prig> powershell\r\nWindows PowerShell\r\nCopyright (C) 2014 Microsoft Corporation. All rights reserved.\r\n\r\n\r\nPS Prig> .\\Build.ps1\r\n...\r\n\r\nPS Prig>\r\n\r\n```\r\n\r\n**NOTE:** It takes somewhere round 30 minutes.\r\n\r\n\r\n\r\n### From Visual Studio\r\nAfter preparing all dependencies, you can build this project in the following steps:\r\n\r\n1. Run Visual Studio as Administrator, and open Prig.sln(This sln contains some ATL projects, so the build process will modify registry).\r\n2. According to the version of the product to use, change the solution configuration and the solution platform and build.\r\n3. The results are output to `$(SolutionDir)$(Configuration)\\$(PlatformTarget)\\`.\r\n\r\n\r\n\r\n## REGISTRATION\r\nIf you built Prig by PowerShell script, `Prig.vsix` will be output to `<top level directory you cloned>\\Release\\x86` directory. You can install by double clicking that. After that, do installation procedure same as the beginning; choose the menu `PRIG` - `Register Prig (Needs Restarting)`.\r\n\r\n\r\n\r\n## UNREGISTRATION\r\nAt first, choose the menu `PRIG` - `Unregister Prig (Needs Restarting)`. After you once restart Visual Studio, uninstall the VSIX; choose `TOOLS` - `Extensions and Updates...`, search `Installed` for `prig` and click `Uninstall`.\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}