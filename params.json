{"name":"Prig","tagline":"Open Source Alternative to Microsoft Fakes","body":"# Prig\r\n## SYNOPSIS\r\nPrig is a lightweight framework for test indirections in .NET Framework.\r\n\r\n\r\n\r\n## DESCRIPTION\r\nPrig(PRototyping jIG) is a framework that generates a [Test Double](http://martinfowler.com/bliki/TestDouble.html) like [Microsoft Fakes](http://msdn.microsoft.com/en-us/library/hh549175.aspx)/[Typemock Isolator](http://www.typemock.com/isolator-product-page)/[Telerik JustMock](http://www.telerik.com/products/mocking.aspx) based on Unmanaged Profiler APIs.\r\nThis framework enables that any methods are replaced with mocks. For example, a static property, a private method, a non-virtual member and so on.\r\n\r\n\r\n\r\n## STATUS\r\nAs of Sept 7, 2014, Prig does not work completely. However, we steadily continue to develop at the private repository. This framework will come out within the year if everything goes well.\r\n\r\n\r\n\r\n## QUICK TOUR\r\nLet's say you want to test the following code: \r\n```cs\r\nusing System;\r\n\r\nnamespace ConsoleApplication\r\n{\r\n    public static class LifeInfo\r\n    {\r\n        public static bool IsNowLunchBreak()\r\n        {\r\n            var now = DateTime.Now;\r\n            return 12 <= now.Hour && now.Hour < 13;\r\n        }\r\n    }\r\n}\r\n```\r\nYou probably can't test this code, because `DateTime.Now` returns the value that depends on an external environment. To make be testable, you should replace `DateTime.Now` to the Test Double that returns the fake information. If you use Prig, it will enable you to generate a Test Double by the following steps without any editing the product code:\r\n\r\n\r\n### Step 1: Install From NuGet\r\nRun Visual Studio 2013 as Administrator, add test project(e.g. `ConsoleApplicationTest`) and run the following command in the Package Manager Console: \r\n```powershell\r\nPM> Install-Package Prig -Pre\r\n```\r\n\r\n\r\n### Step 2: Add Stub Settings\r\nRun the following command in the Package Manager Console: \r\n```powershell\r\nPM> Add-PrigAssembly -Assembly \"mscorlib, Version=4.0.0.0\"\r\n```\r\nThe command means to create the stub settings for the test indirection. The reason to specify `mscorlib` is that `DateTime.Now` belongs `mscorlib`. After the command is invoked, you will get the confirmation message that the project has been modified externally, so reload the project.\r\n\r\n\r\n### Step 3: Modify Stub Settings\r\nYou can find the setting file `<assembly name>.<runtime version>.v<assembly version>.prig` in the project(in this case, it is `mscorlib.v4.0.30319.v4.0.0.0.prig`). Modify the setting in accordance with the comment, then build all projects: \r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  \r\n  <configSections>\r\n    <section name=\"prig\" type=\"Urasandesu.Prig.Framework.PilotStubberConfiguration.PrigSection, Urasandesu.Prig.Framework\" />\r\n  </configSections>\r\n\r\n  <!-- \r\n      The content of tag 'add' is generated by the command 'Get-IndirectionStubSetting'.\r\n      Specifically, you can generate it by the following PowerShell script in the Package Manager Console: \r\n      \r\n      ========================== EXAMPLE 1 ==========================\r\n      PM> $methods = Find-IndirectionTarget datetime get_Now\r\n      PM> $methods\r\n      \r\n      Method\r\n      ======\r\n      System.DateTime get_Now()\r\n      \r\n      \r\n      PM> $methods[0] | Get-IndirectionStubSetting | clip\r\n      PM>\r\n      \r\n      Then, paste the clipboard content to between the tags 'stubs'.\r\n  -->\r\n  <prig>\r\n\r\n    <stubs>\r\n      <add name=\"NowGet\" alias=\"NowGet\">\r\n        <RuntimeMethodInfo xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:x=\"http://www.w3.org/2001/XMLSchema\" z:Id=\"1\" z:FactoryType=\"MemberInfoSerializationHolder\" z:Type=\"System.Reflection.MemberInfoSerializationHolder\" z:Assembly=\"0\" xmlns:z=\"http://schemas.microsoft.com/2003/10/Serialization/\" xmlns=\"http://schemas.datacontract.org/2004/07/System.Reflection\">\r\n          <Name z:Id=\"2\" z:Type=\"System.String\" z:Assembly=\"0\" xmlns=\"\">get_Now</Name>\r\n          <AssemblyName z:Id=\"3\" z:Type=\"System.String\" z:Assembly=\"0\" xmlns=\"\">mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</AssemblyName>\r\n          <ClassName z:Id=\"4\" z:Type=\"System.String\" z:Assembly=\"0\" xmlns=\"\">System.DateTime</ClassName>\r\n          <Signature z:Id=\"5\" z:Type=\"System.String\" z:Assembly=\"0\" xmlns=\"\">System.DateTime get_Now()</Signature>\r\n          <Signature2 z:Id=\"6\" z:Type=\"System.String\" z:Assembly=\"0\" xmlns=\"\">System.DateTime get_Now()</Signature2>\r\n          <MemberType z:Id=\"7\" z:Type=\"System.Int32\" z:Assembly=\"0\" xmlns=\"\">8</MemberType>\r\n          <GenericArguments i:nil=\"true\" xmlns=\"\" />\r\n        </RuntimeMethodInfo>\r\n      </add>\r\n    </stubs>\r\n    \r\n  </prig>\r\n\r\n</configuration>\r\n```\r\n\r\n\r\n### Step 4: Make Tests\r\nIn the test code, it become testable through the use of the stub and the replacement to Test Double that returns the fake information.\r\n```cs\r\nusing NUnit.Framework;\r\nusing ConsoleApplication;\r\nusing System;\r\nusing System.Prig;\r\nusing Urasandesu.Prig.Framework;\r\n\r\nnamespace ConsoleApplicationTest\r\n{\r\n    [TestFixture]\r\n    public class LifeInfoTest\r\n    {\r\n        [Test]\r\n        public void IsNowLunchBreak_should_return_false_when_11_oclock()\r\n        {\r\n            using (new IndirectionsContext())\r\n            {\r\n                // Arrange\r\n                PDateTime.NowGet().Body = () => new DateTime(2013, 12, 13, 11, 00, 00);\r\n\r\n                // Act\r\n                var result = LifeInfo.IsNowLunchBreak();\r\n\r\n                // Assert\r\n                Assert.IsFalse(result);\r\n            }\r\n        }\r\n\r\n        [Test]\r\n        public void IsNowLunchBreak_should_return_true_when_12_oclock()\r\n        {\r\n            using (new IndirectionsContext())\r\n            {\r\n                // Arrange\r\n                PDateTime.NowGet().Body = () => new DateTime(2013, 12, 13, 12, 00, 00);\r\n\r\n                // Act\r\n                var result = LifeInfo.IsNowLunchBreak();\r\n\r\n                // Assert\r\n                Assert.IsTrue(result);\r\n            }\r\n        }\r\n\r\n        [Test]\r\n        public void IsNowLunchBreak_should_return_false_when_13_oclock()\r\n        {\r\n            using (new IndirectionsContext())\r\n            {\r\n                // Arrange\r\n                PDateTime.NowGet().Body = () => new DateTime(2013, 12, 13, 13, 00, 00);\r\n\r\n                // Act\r\n                var result = LifeInfo.IsNowLunchBreak();\r\n\r\n                // Assert\r\n                Assert.IsFalse(result);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Step 5: Run Tests\r\nIn fact, to enable any profiler based mocking tool, you have to set the environment variables. Microsoft Fakes/Typemock Isolator/Telerik JustMock provides the small runner it required, it is true at Prig. So use `prig.exe` to run the test as follows(continue in the Package Manager Console): \r\n```powershell\r\nPM> cd <Your Test Project's Output Directory(e.g. cd .\\ConsoleApplicationTest\\bin\\Debug)>\r\nPM> prig run -process \"C:\\Program Files (x86)\\NUnit 2.6.3\\bin\\nunit-console.exe\" -arguments \"ConsoleApplicationTest.dll /domain=None /framework=v4.0\"\r\nNUnit-Console version 2.6.3.13283\r\nCopyright (C) 2002-2012 Charlie Poole.\r\nCopyright (C) 2002-2004 James W. Newkirk, Michael C. Two, Alexei A. Vorontsov.\r\nCopyright (C) 2000-2002 Philip Craig.\r\nAll Rights Reserved.\r\n\r\nRuntime Environment - \r\n   OS Version: Microsoft Windows NT 6.2.9200.0\r\n  CLR Version: 2.0.50727.8000 ( Net 3.5 )\r\n\r\nProcessModel: Default    DomainUsage: None\r\nExecution Runtime: v4.0\r\n...\r\nTests run: 3, Errors: 0, Failures: 0, Inconclusive: 0, Time: 0.0934818542535837 seconds\r\n  Not run: 0, Invalid: 0, Ignored: 0, Skipped: 0\r\n\r\nPM> \r\n\r\n```\r\n\r\n\r\n### Final Step: Refactoring and Get Trig Back!\r\nIf tests have been created, you can refactor illimitably! For example, you probably can find the result of refactoring as follows: \r\n```cs\r\nusing System;\r\n\r\nnamespace ConsoleApplication\r\n{\r\n    public static class LifeInfo\r\n    {\r\n        public static bool IsNowLunchBreak()\r\n        {\r\n            // 1. Add overload to isolate from external environment then call it from original method.\r\n            return IsNowLunchBreak(DateTime.Now);\r\n        }\r\n\r\n        public static bool IsNowLunchBreak(DateTime now)\r\n        {\r\n            // 2. Also, I think the expression '12 <= now.Hour && now.Hour < 13' is too complex.\r\n            //    Better this way, isn't it?\r\n            return now.Hour == 12;\r\n        }\r\n        // 3. After refactoring, no longer need to use Prig, because you can test this overload.\r\n    }\r\n}\r\n```\r\nAs just described, Prig helps the code that depends on an untestable library gets trig back. I guarantee you will enjoy your development again!!\r\n\r\n\r\n\r\n# INSTALLATION FROM SOURCE CODE\r\n## DEPENDENCY\r\nTo build this project needs the following dependencies: \r\n* [Visual Studio 2013(more than Professional Edition)](http://www.visualstudio.com/)\r\n* [Boost 1.55.0](http://www.boost.org/)  \r\nExtract to C:\\boost_1_55_0, and will build with the following options(x86 and x64 libs are required):\r\n```dos\r\nCMD boost_1_55_0>cd\r\nC:\\boost_1_55_0\r\n\r\nCMD boost_1_55_0>bootstrap.bat\r\nBuilding Boost.Build engine\r\n\r\nBootstrapping is done. To build, run:\r\n\r\n    .\\b2\r\n\r\nTo adjust configuration, edit 'project-config.jam'.\r\nFurther information:\r\n...\r\n\r\nCMD boost_1_55_0>.\\b2 link=static threading=multi variant=debug,release runtime-link=shared,static -j 4\r\n\r\nBuilding the Boost C++ Libraries.\r\n\r\nPerforming configuration checks\r\n...\r\n\r\nCMD boost_1_55_0>.\\b2 link=static threading=multi variant=debug,release runtime-link=shared,static -j 4 --stagedir=.\\stage\\x64 address-model=64\r\n\r\nBuilding the Boost C++ Libraries.\r\n\r\nPerforming configuration checks\r\n...\r\n```\r\n* [Google Test 1.6](https://code.google.com/p/googletest/)  \r\nExtract to C:\\gtest-1.6.0, and upgrade C:\\gtest-1.6.0\\msvc\\gtest.sln to Visual Studio 2013. Choose the `Build` menu, and open `Configuration Manager...`. On `Configuration Manager` dialog box, in the `Active Solution Platform` drop-down list, select the `<New...>` option. After the `New Solution Platform` dialog box is opened, in the `Type or select the new platform` drop-down list, select a 64-bit platform. Then build all(Debug/Release) configurations.\r\n* [NUnit 2.6.3.13283](http://www.nunit.org/)  \r\nInstall using with the installer(NUnit-2.6.3.msi).\r\n* [Modeling SDK for Microsoft Visual Studio 2013](http://www.microsoft.com/en-us/download/details.aspx?id=40754)  \r\nInstall using with the installer(VS_VmSdk.exe).\r\n* [NuGet Command-Line Utility](http://docs.nuget.org/docs/start-here/installing-nuget)  \r\nDownload command line utility `nuget.exe`, then append its path to the environment variable `path`.\r\n\r\n\r\n\r\n## BUILD\r\nAfter preparing all dependencies, you can build this project in the following steps:\r\n\r\n1. Run Visual Studio as Administrator, and open Prig.sln(This sln contains some ATL projects, so the build process will modify registry).\r\n2. According to the version of the product to use, change the solution configuration and the solution platform and build.\r\n3. The results are output to `$(SolutionDir)$(Configuration)\\$(PlatformTarget)\\`.\r\n\r\n\r\n\r\n## REGISTRATION\r\nRun Developer Command Prompt for VS2013 as Administrator, and register dlls that were output to `$(SolutionDir)$(Configuration)\\$(PlatformTarget)\\` to registry and GAC as follows(these are the examples for x86/.NET 3.5, but also another environments are in the same manner): \r\n```dos\r\nCMD x86>cd\r\nC:\\Prig\\Release\\x86\r\n\r\nCMD x86>regsvr32 /i Urasandesu.Prig.dll\r\n\r\nCMD x86>cd \"..\\..\\Release(.NET 3.5)\\AnyCPU\"\r\n\r\nCMD AnyCPU>cd\r\nC:\\Prig\\Release(.NET 3.5)\\AnyCPU\r\n\r\nCMD AnyCPU>gacutil /i Urasandesu.NAnonym.dll\r\nMicrosoft (R) .NET Global Assembly Cache Utility.  Version 4.0.30319.33440\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nAssembly successfully added to the cache\r\n\r\nCMD AnyCPU>gacutil /i Urasandesu.Prig.Framework.dll\r\nMicrosoft (R) .NET Global Assembly Cache Utility.  Version 4.0.30319.33440\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nAssembly successfully added to the cache\r\n\r\nCMD AnyCPU>\r\n```\r\n\r\n\r\n\r\n## UNREGISTRATION\r\nUnregistration operation is similar in the registration. Run Developer Command Prompt for VS2013 as Administrator and execute the following commands: \r\n```dos\r\nCMD x86>cd\r\nC:\\Prig\\Release\\x86\r\n\r\nCMD x86>regsvr32 /u Urasandesu.Prig.dll\r\n\r\nCMD x86>cd \"..\\..\\Release(.NET 3.5)\\AnyCPU\"\r\n\r\nCMD AnyCPU>cd\r\nC:\\Prig\\Release(.NET 3.5)\\AnyCPU\r\n\r\nCMD AnyCPU>gacutil /u \"Urasandesu.Prig.Framework, Version=0.1.0.0, Culture=neutral, PublicKeyToken=acabb3ef0ebf69ce, processorArchitecture=MSIL\"\r\nMicrosoft (R) .NET Global Assembly Cache Utility.  Version 4.0.30319.33440\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\n\r\nAssembly: Urasandesu.Prig.Framework, Version=0.1.0.0, Culture=neutral, PublicKeyToken=acabb3ef0ebf69ce, processorArchitecture=MSIL\r\nUninstalled: Urasandesu.Prig.Framework, Version=0.1.0.0, Culture=neutral, PublicKeyToken=acabb3ef0ebf69ce, processorArchitecture=MSIL\r\nNumber of items uninstalled = 1\r\nNumber of failures = 0\r\n\r\nCMD AnyCPU>gacutil /u \"Urasandesu.NAnonym, Version=0.2.0.0, Culture=neutral, PublicKeyToken=ce9e95b04334d5fb, processorArchitecture=MSIL\"\r\nMicrosoft (R) .NET Global Assembly Cache Utility.  Version 4.0.30319.33440\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\n\r\nAssembly: Urasandesu.NAnonym, Version=0.2.0.0, Culture=neutral, PublicKeyToken=ce9e95b04334d5fb, processorArchitecture=MSIL\r\nUninstalled: Urasandesu.NAnonym, Version=0.2.0.0, Culture=neutral, PublicKeyToken=ce9e95b04334d5fb, processorArchitecture=MSIL\r\nNumber of items uninstalled = 1\r\nNumber of failures = 0\r\n\r\nCMD AnyCPU>\r\n```\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}