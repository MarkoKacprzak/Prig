/* 
 * File: ULTableMixin.cs
 * 
 * Author: Akira Sugiura (urasandesu@gmail.com)
 * 
 * 
 * Copyright (c) 2014 Akira Sugiura
 *  
 *  This software is MIT License.
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using UntestableLibrary;

namespace program1.Mixins.UntestableLibrary
{
    public static class ULTableMixin
    {
        public static IEnumerable<ULColumn> GetAutoGeneratedColumns(this ULTable @this)
        {
            if (@this == null)
                throw new ArgumentNullException("@this");

            var patterns = GetAutoGeneratedColumnNamePatterns(@this.TableName);
            return @this.Columns.OfType<ULColumn>().Where(column => patterns.Any(_ => _(column.Name)));
        }

        public static IEnumerable<ULColumn> GetManuallyGeneratedColumns(this ULTable @this)
        {
            if (@this == null)
                throw new ArgumentNullException("@this");

            var patterns = GetAutoGeneratedColumnNamePatterns(@this.TableName);
            return @this.Columns.OfType<ULColumn>().Where(column => !patterns.Any(_ => _(column.Name)));
        }

        static readonly Func<string, string, bool> ColumnNameEquals = (x, y) => string.Equals(x, y, StringComparison.InvariantCultureIgnoreCase);

        static Func<string, bool>[] GetAutoGeneratedColumnNamePatterns(string tableName)
        {
            return new Func<string, bool>[] 
            { 
                columnName => ColumnNameEquals(tableName + "_ID", columnName), 
                columnName => ColumnNameEquals("DELETED", columnName), 
                columnName => ColumnNameEquals("CREATED", columnName), 
                columnName => ColumnNameEquals("MODIFIED", columnName), 
            };
        }
    }
}
